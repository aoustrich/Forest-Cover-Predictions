
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Search for functions across packages at https://www.tidymodels.org/find/
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(embed)
> library(ranger)
> library(parallel)
> 
> # library(poissonreg)
> # library(rpart)
> # library(stacks)
> # library(discrim)
> # library(naivebayes)
> # library(kknn)
> # library(kernlab)
> # library(themis)
> # library(keras)
> # library(bonsai)
> # library(lightgbm)
> # library(dbarts)
> 
> 
> # Reading Data ------------------------------------------------------------
> 
> train <- vroom("data/train.csv")
Rows: 15120 Columns: 56
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (56): Id, Elevation, Aspect, Slope, Horizontal_Distance_To_Hydrology, Ve...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- vroom("data/test.csv")
Rows: 565892 Columns: 55
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (55): Id, Elevation, Aspect, Slope, Horizontal_Distance_To_Hydrology, Ve...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> train$Cover_Type <- as.factor(train$Cover_Type)
> 
> # create smaller sample to test on before running full model
> # s.train <- train %>% sample_n(1000)
> 
> # Output Function ---------------------------------------------------------
> 
> predict_export <- function(workflowName, fileName){
+   # make predictions and prep data for Kaggle format
+   x <- predict(workflowName,
+                       new_data=test,
+                       type="class")
+   
+   output <- as.data.frame(cbind(test$Id, as.character(x$.pred_class)))
+   colnames(output) <- c("Id", "type")
+   
+   path <- paste0("/submissions/",fileName,".csv")
+   vroom_write(output, file=path,delim=',')
+ }
> 
> 
> # Random Forest -----------------------------------------------------------
> RFmodel <- rand_forest(mtry = tune(),
+                       min_n=tune(),
+                       trees=500) %>%
+   set_engine("ranger") %>%
+   set_mode("classification")
> 
> RFrecipe <- recipe(Cover_Type ~ ., data = train) %>% 
+ # RFrecipe <- recipe(Cover_Type ~ ., data = s.train) %>% 
+             update_role(Id, new_role = "ID") %>% 
+             step_lencode_mixed(all_nominal_predictors(), outcome = vars(Cover_Type)) #%>%  #target encoding
>             # step_mutate_at(all_of("Hillshade_9am","Hillshade_Noon","Hillshade_3pm"), fn = ~as.factor(.))
> 
> RFbaked <- bake(prep(RFrecipe), new_data = train)
> # RFbaked <- bake(prep(RFrecipe), new_data = s.train)
> 
> RFworkflow <- workflow() %>%
+   add_recipe(RFrecipe) %>%
+   add_model(RFmodel)
> 
> RF_tuning_grid <- grid_regular(mtry(c(1,ncol(RFbaked))), min_n(), levels=10)
> 
> folds <- vfold_cv(train, v = 10, repeats = 1)
> 
> tune_control <- control_grid(verbose = TRUE)
> 
> cluster <- makePSOCKcluster(10)
> doParallel::registerDoParallel(cluster)
> start <- proc.time()
> RF_CVresults <- RFworkflow %>% 
+   tune_grid(resamples = folds,
+             grid = RF_tuning_grid,
+             metrics = metric_set(accuracy),
+             control = tune_control)
